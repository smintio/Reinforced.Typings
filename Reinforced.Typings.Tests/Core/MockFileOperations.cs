using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Reinforced.Typings.Ast.Dependency;
using Reinforced.Typings.ReferencesInspection;
using Reinforced.Typings.Visitors;
using Reinforced.Typings.Visitors.TypeScript;
using Reinforced.Typings.Visitors.Typings;

namespace Reinforced.Typings.Tests.Core
{
    public class MockFileOperations : IFilesOperations
    {
        public bool DeployCalled { get; private set; }
        public bool TempRegistryCleared { get; private set; }

        public ExportContext Context { get; set; }

        public Dictionary<string, string> ExportedFiles { get; private set; }

        public MockFileOperations()
        {
            ExportedFiles = new Dictionary<string, string>();
        }

        public void DeployTempFiles()
        {
            DeployCalled = true;
        }

        public void ClearTempRegistry()
        {
            TempRegistryCleared = true;
        }

        public void Export(string fileName, ExportedFile file)
        {
            StringBuilder sb = new StringBuilder();
            using (var sw = new StringWriter(sb))
            {
                sw.NewLine = Context.Global.NewLine;
                ExportCore(sw, file);
            }
            ExportedFiles[fileName] = sb.ToString();
        }

        protected virtual void ExportCore(TextWriter tw, ExportedFile file)
        {
            var visitor =
                Context.Global.VisitorType == null
                    ? Context.Global.ExportPureTypings
                        ? new TypingsExportVisitor(tw, Context)
                        : new TypeScriptExportVisitor(tw, Context)
                    : (TextExportingVisitor)Activator.CreateInstance(Context.Global.VisitorType, new object[] { tw, Context });
            WriteWarning(tw);

            visitor.VisitFile(file);
        }

        private void WriteWarning(TextWriter tw)
        {
            if (Context.Global.WriteWarningComment)
            {
                tw.WriteLine("//     This code was generated by a Reinforced.Typings tool. ");
                tw.WriteLine("//     Changes to this file may cause incorrect behavior and will be lost if");
                tw.WriteLine("//     the code is regenerated.");
                tw.WriteLine();
            }
        }
    }
}
